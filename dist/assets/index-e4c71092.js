import{B as i}from"./base.service-1bae7a9f.js";import{M as p,t as r}from"./index-f2f50ed2.js";import{S as u}from"./suppliers.service-69572484.js";class d extends i{}class l extends i{async getConsolidated(e,t,s,n){let a=`${this.resource}/Consolidated?startTime=${e}&endTime=${t}&type=${s}&typeDetail=${n}`;const c=await this.apiClient.get(a);if(c.status===200)return c.data}async getByExpenseType(e){const t=`${this.resource}/ExpenseType/${e}`,s=await this.apiClient.get(t);if(s.status===200)return s.data}}class $ extends i{}class h extends i{async addTransition(e){let t=!1;try{const s=await this.apiClient.post(`${this.resource}/Transition`,e);(s.status===200||s.status===201)&&(t=!0)}catch(s){p(s)}return t}async removeTransition(e){let t=!1;try{const s=await this.apiClient.delete(`${this.resource}/Transition/${e.fromStatusId}/${e.toStatusId}`);(s.status===200||s.status===201)&&(t=!0)}catch(s){p(s)}return t}}class w extends i{async GetBetweenDates(e,t){const s=`${this.resource}?startTime=${e}&endTime=${t}`,n=await r.get(s);if(n.status===200)return n.data}async GetBetweenDatesAndStatus(e,t,s){const n=`${this.resource}?startTime=${e}&endTime=${t}&statusId=${s}`,a=await r.get(n);if(a.status===200)return a.data}async GetBetweenDatesAndExcludeStatus(e,t,s){const n=`${this.resource}?startTime=${e}&endTime=${t}&excludeStatusId=${s}`,a=await r.get(n);if(a.status===200)return a.data}async GetBetweenDatesAndSupplier(e,t,s){const n=`${this.resource}?startTime=${e}&endTime=${t}&supplierId=${s}`,a=await r.get(n);if(a.status===200)return a.data}async GetDueDates(e){const t=await r.post(`${this.resource}/DueDates`,e);if(t.status===200)return t.data}async RecreateDueDates(e){return(await r.post(`${this.resource}/RecreateDueDates`,e)).status===200}async UpdateStatuses(e){const t=`${this.resource}/UpdateStatuses`;return(await r.post(t,e)).status===200}async CreateImport(e){const t=`${this.resource}/Import`;return(await r.post(t,e)).status===200}async UpdateImport(e){const t=`${this.resource}/Import/${e.id}`;return(await r.put(t,e)).status===200}async DeleteImport(e){const t=`${this.resource}/Import/${e.id}`;return(await r.delete(t)).status===200}}class y extends i{async getFiltered(e,t,s){let n=`${this.resource}?startTime=${e}&endTime=${t}`;s&&(n+=`&supplierId=${s}`);const a=await this.apiClient.get(n);if(a.status===200)return a.data}async addDetail(e){return(await this.apiClient.post(`${this.resource}/Detail`,e)).data}async updateDetail(e){return(await this.apiClient.put(`${this.resource}/Detail/${e.id}`,e)).data}async removeDetail(e){return(await this.apiClient.delete(`${this.resource}/Detail/${e}`)).data}}const v={PurchaseInvoice:new w("/PurchaseInvoice"),PurchaseInvoiceSerie:new $("/PurchaseInvoiceSerie"),PurchaseInvoiceStatus:new h("/PurchaseInvoiceStatus"),Supplier:new u("/Supplier"),SupplierType:new u("/SupplierType"),Expense:new l("Expense"),ExpenseType:new d("ExpenseType"),Receipt:new y("/Receipt")};export{v as E};
